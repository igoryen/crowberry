//=========================================
//      VARIABLES
//=========================================

//=========================================
//      IMPORTS
//=========================================

//=========================================
//      MIXINS
//=========================================

    @mixin debug( $bordercolor ) {
        border: 1px solid $bordercolor;
        margin: 5px;
        border-radius: 3px;
    }

    // vendor prefix mixins

    @mixin banner( $picpath ) {
        background: url(../img/banners/#{$picpath}.jpg ) 0px -100px; 
        background-size: cover;
        width: 100%;
        background-repeat: no-repeat;
        height: 19em;
        display: flex;
    }

    @mixin display_flex() {
        display: -webkit-box;            
        display: -ms-flexbox;
        display: flex;
    }

    @mixin flex_wrap( $how, $amt:0 ) {
        -webkit-flex-wrap: $how;
        -ms-flex-wrap: $how;
        flex-wrap: $how;  

        -webkit-box-flex: $amt;
        -webkit-flex: $amt;
        -ms-flex: $amt;
            flex: $amt;      
    }

    @mixin transform_rotate( $deg ){
        -webkit-transform: rotate($deg);
        -ms-transform: rotate($deg);
        transform: rotate($deg);
    }

    @mixin align_items( $where ) {
        
        @if $where == flex-start {
            -webkit-box-align: start;
            -ms-flex-align: start;
            align-items: flex-start;
        }
        @if $where == flex-end {
            -webkit-box-align: end;
            -ms-flex-align: end;
            align-items: flex-end;
        }
        @if $where == center {
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
        }
        @if $where == baseline {
            -webkit-box-align: baseline;
            -ms-flex-align: baseline;
            align-items: baseline;
        }
        @if $where == stretch {
            -webkit-box-align: stretch;
            -ms-flex-align: stretch;
            align-items: stretch;
        }
    }

    @mixin flex( $what ) {
        -webkit-box-flex: $what;
        -webkit-flex: $what;
        -ms-flex: $what;
        flex: $what;
    }


    // @mixin flex_direction_column() {
    //     -webkit-box-orient: vertical;
    //     -webkit-box-direction: normal;
    //     -ms-flex-direction: column;
    //     flex-direction: column;
    // }

    // @mixin flex_direction_row() {
    //     -webkit-box-orient: horizontal;
    //     -webkit-box-direction: normal;
    //     -ms-flex-direction: row;
    //     flex-direction: row;
    // }

    @mixin flex_direction( $where ){
        @if $where == row { 
            -webkit-box-orient: horizontal;
            -webkit-box-direction: normal;
            -ms-flex-direction: row;
            flex-direction: row;
        }
        @if $where == row-reverse { 
            -webkit-box-orient: horizontal;
            -webkit-box-direction: reverse;
            -ms-flex-direction: row-reverse;
            flex-direction: row-reverse;
        }
        @if $where == column { 
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
            -ms-flex-direction: column;
            flex-direction: column;
        }
        @if $where == column-reverse { 
            -webkit-box-orient: vertical;
            -webkit-box-direction: reverse;
            -ms-flex-direction: column-reverse;
            flex-direction: column-reverse;
        }
    }

    // a comma separated list of white-space-separated lists of values
    @mixin transition( $props, $durs, $timing ) {
        -webkit-transition-property: $props;
        -o-transition-property: $props;
        transition-property: $props;
        
        -webkit-transition-duration: $durs;
        -o-transition-duration: $durs;
        transition-duration: $durs;
        
        -webkit-transition-timing-function: $timing;
        -o-transition-timing-function: $timing;
        transition-timing-function: $timing;
    }

    @mixin justify_content( $where ) {
        @if $where == flex-start {
            
            -webkit-box-pack: start;
            -ms-flex-pack: start;
            justify-content: flex-start;
        }

        @if $where == flex-end {
        
            -webkit-box-pack: end;
            -ms-flex-pack: end;
            justify-content: flex-end;
        }

        @if $where == center {

            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
        }

        @if $where == space-between{
        
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
        }

        @if $where == space-around {

            -ms-flex-pack: distribute;
            justify-content: space-around;
        }

        @if $where == space-evenly {

            -webkit-box-pack: space-evenly;
            -ms-flex-pack: space-evenly;
            justify-content: space-evenly;
        }
    }

    @mixin border_radius( $x ) {
        -webkit-border-radius: $x;
        -moz-border-radius: $x;
        -ms-border-radius: $x;
        -o-border-radius: $x;
        border-radius: $x;
    }

    @mixin background_gradient( $dir, $begincolor, $endcolor) {

        background-color: $endcolor;

        @if $dir == bottom {
            background: -webkit-gradient(linear, left top, left $dir,             from($begincolor), to($endcolor));
            background: -webkit-linear-gradient( top    $begincolor, $endcolor);
            background: -o-linear-gradient(      top,   $begincolor, $endcolor);
        }
        @if $dir == top {
            background: -webkit-gradient(linear,         left bottom, left $dir,  from($begincolor), to($endcolor));
            background: -webkit-linear-gradient(         bottom,                       $begincolor, $endcolor);
            background: -o-linear-gradient(              bottom,                       $begincolor, $endcolor);

        }        

        @if $dir == left {
            background: -webkit-gradient(linear,         right top, $dir top,     from($begincolor), to($endcolor));
            background: -webkit-linear-gradient(         right,                     $begincolor, $endcolor);
            background: -o-linear-gradient(              right,                     $begincolor, $endcolor);

        }

        @if $dir == right {

            background: -webkit-gradient( linear,        left top, $dir top,     from($begincolor), to($endcolor));
            background: -webkit-linear-gradient(         left,                      $begincolor, $endcolor);
            background: -o-linear-gradient(              left,                      $begincolor, $endcolor);
        }

        

        background: linear-gradient(to $dir, $begincolor, $endcolor);
    }

    @mixin flex_grow( $val ) {
        -webkit-box-flex: $val;
        -ms-flex-positive: $val;
        flex-grow: $val;
    }

    @mixin flex( $val1, $val2:null, $val3:null ) {

        // "flex: none;" is equivalent to (computes to) "flex: 0 0 auto;"
        // i.e. "flex-grow: 0; flex-shrink: 0; flex-basis: auto;"
        // Effect: The item is sized according to its width and height properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container.
        @if $val1 == none {
            -webkit-box-flex: 0;
            -ms-flex: $val1;
            flex: $val1;
        }

        // "flex: auto;" equivalent to "flex: 1 1 auto;"
        // i.e. "flex-grow: 1; flex-shrink: 1; flex-basis: auto;"
        // Effect: The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. 
        @if $val1 == auto { 
            -webkit-box-flex: 1;
            -ms-flex: $val1;
            flex: $val1;
        }

        // e.g. initial OR inherit OR unset OR 10em OR 30px        

        // "flex: initial;" is interpreted as "flex: 0 1 auto;" // This is the default.
        // i.e. "flex-grow: 0; flex-shrink: 1; flex-basis: auto;"        
        // The item is sized according to its width and height properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container.

        // "flex: 10em;" is interpreted as "flex-basis: 10em;"
        

        @if type-of($val1) == string { 
            -webkit-box-flex: $val1;
            -ms-flex: $val1;
            flex: $val1;
        }   


        // positive number e.g. "flex: 1;" or "flex: 2;"
        // This is equivalent to setting "flex: <positive-number> 1 0". 
        // i.e. "flex-grow: <positive-number>; flex-shrink: 1; flex-basis: 0;"
        // The item is given the specified proportion of the free space in the container. 

        //  e.g. "flex: 1;" is interpreted as "flex-grow: 1;"

        @if type-of($val1) == number  { 
            -webkit-box-flex: $val1;
            -ms-flex: $val1;
            flex: $val1;
        }

        // e.g. 1 30px OR 2 2
        // "flex: 1 0;"    is interpreted as "flex-grow: 1; flex-shrink: 0;"
        // "flex: 1 30px;" is interpreted as "flex-grow: 1; flex-basis: 30px;"


        @if type-of($val1) == number and type-of( $val2) != null  { 
            -webkit-box-flex: $val1;
            -ms-flex: $val1 $val2;
            flex: $val1 $val2;
        }

        // e.g. 2 2 10% 
        // "flex: 2 2 10%;" is interpreted as "flex-grow: 2; flex-shrink: 2; flex-basis: 10%;"

        @if type-of($val1) == number and type-of( $val2) != null and type-of( $val3) != null { 
            -webkit-box-flex: $val1;
            -ms-flex: $val1 $val2 $val3;
            flex: $val1 $val2 $val3;
        }

    }


    @mixin transform( $val ) {
        -webkit-transform: $val;
        -ms-transform: $val;
        transform: $val;
    }



//=========================================
//      DEBUG
//=========================================


    .anthony { @include debug( red );}
    .barbara { @include debug( deeppink );}
    .betty { @include debug( darkorange );}
    .brian { @include debug( darkkhaki );}
    .carol { @include debug( magenta );}
    .charles { @include debug( blueviolet );}
    .christopher { @include debug( limegreen );}
    .daniel { @include debug( lightseagreen );}
    .david { @include debug( cyan );}
    .deborah { @include debug( steelblue );}
    .donald { @include debug( deepskyblue );}
    .donna { @include debug( mediumblue );}
    .dorothy { @include debug( burlywood );}
    .edward { @include debug( red );}
    .elizabeth { @include debug( red );}
    .george { @include debug( red );}
    .helen { @include debug( red );}
    .james { @include debug( red );}
    .jason  { @include debug( red );}
    .jeff { @include debug( silver );}
    .jennifer { @include debug( red );}
    .john { @include debug( red );}
    .joseph { @include debug( rosybrown );}
    .karen    { @include debug( red );}
    .kenneth { @include debug( red );}
    .kevin { @include debug( red );}
    .kimberly { @include debug( red );}
    .laura { @include debug( red );}
    .linda { @include debug( red );}
    .lisa { @include debug( red );}
    .maria { @include debug( red );}
    .mark { @include debug( red );}
    .mary { @include debug( red );}
    .michael { @include debug( brown );}
    .michelle { @include debug( red );}
    .nancy { @include debug( red );}
    .patricia { @include debug( red );}
    .paul { @include debug( red );}
    .richard { @include debug( red );}
    .robert { @include debug( red );}
    .ronald { @include debug( red );}
    .ruth { @include debug( red );}
    .sandra { @include debug( red );}
    .sarah { @include debug( red );}
    .sharon { @include debug( red );}
    .steven { @include debug( red );}
    .susan { @include debug( red );}
    .thomas { @include debug( red );}
    .william { @include debug( red );}


//=========================================
//      GLOBAL STYLES
//=========================================

//=========================================
//      SECTION A
//=========================================

//=========================================
//      SECTION B
//=========================================

    body, html {
        height: 100%;
    }

    .barbara { 
        /* The image used */
        background-image: url("../img/sky-lights-space-dark.jpg");

        /* Full height */
        height: 100%; 

        /* Create the parallax scrolling effect */
        background-attachment: fixed;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .betty {
        height:300px;
        background-color:red;
        font-size:36px;
    }
        

//=========================================
//      MEDIA QUERIES
//=========================================


    @media screen and (max-width: 400px) {

        
    }